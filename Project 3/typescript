Script started on 2024-11-13 18:12:38-05:00
bash-4.4$ make
g++ -std=c++98 -Wall -c project3.cpp -o project3.o
g++ -std=c++98 -Wall -c ColorClass.cpp -o ColorClass.o
g++ -std=c++98 -Wall -c ImageColorClass.cpp -o ImageColorClass.o
g++ -std=c++98 -Wall -c PatternClass.cpp -o PatternClass.o
g++ -std=c++98 -Wall -c RectangleClass.cpp -o RectangleClass.o
g++ -std=c++98 -Wall -c getValidInput.cpp -o getValidInput.o
g++ project3.o ColorClass.o ImageColorClass.o PatternClass.o RectangleClass.o getValidInput.o -o proj3.exe
bash-4.4$ valgrind --leak-check=full ./projec[K[K3.exe
==3399349== Memcheck, a memory error detector
==3399349== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==3399349== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==3399349== Command: ./proj3.exe
==3399349== 
Enter string for PPM image file name to load: deer.ppm
1. Annotate image with rectangle
2. Annotate image with pattern from file
3. Insert another image
4. Write out current image
5. Exit the program 
Enter int for main menu choice: 1
1. Specify upper left and lower right corners of rectangle
2. Specify upper left corner and dimensions of rectangle
3. Specify extent from center of rectangle
Enter int for rectangle specification method: 1
Enter upper left corner row and column: 340
200
Enter lower right corner row and column: 350
220
1. Red
2. Green
3. Blue
4. Black
5. White
Enter int for rectangle color: 1
1. No
2. Yes
Enter int for rectangle fill option: 2
1. Annotate image with rectangle
2. Annotate image with pattern from file
3. Insert another image
4. Write out current image
5. Exit the program 
Enter int for main menu choice: 4
Enter string for PPM file name to output: deeringly.ppm
1. Annotate image with rectangle
2. Annotate image with pattern from file
3. Insert another image
4. Write out current image
5. Exit the program 
Enter int for main menu choice: 5
Thank you for using this program
==3399349== 
==3399349== HEAP SUMMARY:
==3399349==     in use at exit: 0 bytes in 0 blocks
==3399349==   total heap usage: 10 allocs, 10 frees, 3,332,176 bytes allocated
==3399349== 
==3399349== All heap blocks were freed -- no leaks are possible
==3399349== 
==3399349== For lists of detected and suppressed errors, rerun with: -s
==3399349== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
bash-4.4$ exit
exit

Script done on 2024-11-13 18:13:43-05:00
